{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onClicked","alert","concat","state","value1","value2","value3","value4","objectSpread","commandList","cmdName","cmdValue","cmdInput","focus","_this2","react_default","a","createElement","id","className","calssName","value","ref","placeholder","onChange","e","setState","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA6DeA,qBAzDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAOFI,WAAW,WACTC,MAAK,8FAAAC,OAAwCT,EAAKU,MAAMC,OAAnD,cAAAF,OAAsET,EAAKU,MAAME,OAAjF,cAAAH,OAAoGT,EAAKU,MAAMG,OAA/G,cAAAJ,OAAkIT,EAAKU,MAAMI,UAPlJd,EAAKU,MAALT,OAAAc,EAAA,EAAAd,CAAA,GACKF,EADL,CAEEiB,YAAc,CAAC,CAACC,QAAU,OAAO,CAACA,QAAU,SAC5CC,SAAS,KALKlB,mFAYhBG,KAAKgB,SAASC,yCAEP,IAAAC,EAAAlB,KACP,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,MAAIE,UAAY,aAAhB,aACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,aAAhB,iBAGFJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,MAAIG,UAAY,iBACdL,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAK,mBACNH,EAAAC,EAAAC,cAAA,MAAIE,UAAY,YAAhB,WACAJ,EAAAC,EAAAC,cAAA,SACEE,UAAY,WACZE,MAASzB,KAAKO,MAAMQ,SACpBW,IAAK,SAAAA,GAAMR,EAAKF,SAAWU,GAC3BC,YAAa,qBACbC,SAAW,SAACC,GAAKX,EAAKY,SAAS,CAACf,SAAWc,EAAEE,OAAON,aAW5DN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACNH,EAAAC,EAAAC,cAAA,MAAIG,UAAY,kBACdL,EAAAC,EAAAC,cAAA,oCAjDMW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec646ebb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super()\n    this.state={\n      ...props,\n      commandList : [{cmdName : \"CMD\"},{cmdName : \"LIST\"}],\n      cmdValue:\"\"\n    }\n  }\n  _onClicked=()=>{\n    alert(`이러면 form Tag 도 필요없겠군 ㅎㅎ \\n input1 = ${this.state.value1} input2 = ${this.state.value2} input3 = ${this.state.value3} input4 = ${this.state.value4}` )\n  }\n  componentDidMount(){\n    this.cmdInput.focus();\n  }\n  render() {\n    return (\n      <div id=\"jb-container\">\n        <div id=\"jb-header\">\n          <h1 className = \"mainTitle\">HOME PAGE</h1>\n          <h3 className = \"mainTitle\">Kim Jong Woo</h3>\n        </div>\n        \n        <div id=\"jb-nav\">\n          <ul calssName = \"leftContainer\">\n            <li>시간</li>\n          </ul>\n        </div>\n        <div id=\"jb-content\">\n          <div id = \"jb-cmdContainer\">\n              <h2 className = \"cmdTitle\">Command</h2>\n              <input \n                className = \"cmdInput\" \n                value = {this.state.cmdValue}\n                ref={ref=>{this.cmdInput = ref}}\n                placeholder =\"input your cmd ...\"\n                onChange ={(e)=>{this.setState({cmdValue : e.target.value})}}>\n              </input>\n            \n          </div>\n            {/* <h5>\n              {\"cmdList : \"}\n              {this.state.commandList.map((item)=>{\n                return item.cmdName+\"  \"\n              })}\n            </h5> */}\n        </div>\n        <div id=\"jb-sidebar\">\n          <ul calssName = \"rightContainer\">\n            <li>날씨</li>\n            </ul>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}