{"version":3,"sources":["menu/leftList.js","menu/mainList.js","menu/rightList.js","App.js","serviceWorker.js","index.js"],"names":["LeftContainer","styled","div","_templateObject","Component","height","window","innerHeight","MainContainer","mainList_templateObject","CmdContainer","_templateObject2","CmdListContainer","_templateObject3","props","isCmdListContainerVisible","CmdInput","input","_templateObject4","CmtTitle","a","_templateObject5","CmdList","_templateObject6","ListName","_templateObject7","CmdListImte","_templateObject8","MainList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_sendInputText","e","keyCode","setState","cmdValue","cmdInput","state","objectSpread","cmdList","listName","listAction","focus","_this2","react_default","createElement","onClick","value","ref","placeholder","onChange","target","onKeyDown","map","item","index","RightContainer","rightList_templateObject","GlobalStyle","createGlobalStyle","App_templateObject","Container","App_templateObject2","Header","header","App_templateObject3","TopMenu","App_templateObject4","display","TopMenuList","App_templateObject5","TitleName","p","App_templateObject6","title","App","_cmdInput","inputText","toLocaleLowerCase","isTopMenuVisible","alert","commandList","cmdName","mainList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1f7cd75.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled,{createGlobalStyle} from \"styled-components\";\r\n\r\nconst LeftContainer = styled.div`\r\n    width:20%;\r\n    float: left;\r\n    border : 1px solid #000;\r\n    @media ( max-width: 480px ) {\r\n        float: none;\r\n        width: auto;\r\n    }\r\n`\r\nclass LeftList extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.state={\r\n      ...props,\r\n    }\r\n  }\r\n  render() {\r\n    return (     \r\n        <LeftContainer>\r\n          <ul calssName = \"leftContainer\">\r\n            <li>시간</li>\r\n          </ul>\r\n        </LeftContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftList;\r\n","import React, { Component } from 'react';\r\nimport styled,{createGlobalStyle} from \"styled-components\";\r\nimport { list } from 'postcss';\r\nconst height = window.innerHeight;\r\nconst MainContainer = styled.div`\r\n  display : flex;\r\n  flex :3;\r\n  flex-direction: column;\r\n  height : ${height/2}px;\r\n  justify-content: center;\r\n  align-items: center; \r\n  @media ( max-width: 480px ) {\r\n    float: none;\r\n    width: auto;\r\n  }\r\n`\r\nconst CmdContainer = styled.div`\r\n  display : flex; \r\n`\r\nconst CmdListContainer = styled.div`\r\n  display :  ${props=> props.isCmdListContainerVisible};\r\n  flex-direction: column;\r\n`\r\nconst CmdInput = styled.input`  \r\n  border : 1px solid #000;\r\n  background-color :#000;\r\n  color:#ffffff;\r\n  margin : 0px 0px 0px 10px\r\n`\r\nconst CmtTitle = styled.a`\r\n  font-weight : 700;\r\n  font-size : 20px;\r\n  text-align : center;\r\n`\r\nconst CmdList = styled.a`\r\n  font-weight : 700;\r\n  font-size : 15px;\r\n  text-align : center;\r\n  margin-top : 30px;\r\n`\r\nconst ListName = styled.a`\r\n  color : yellow\r\n`\r\nconst CmdListImte = styled.div`\r\n  margin-top : 10px\r\n`\r\nclass MainList extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.state={\r\n      ...props,\r\n      cmdValue : \"\",\r\n      cmdList :[{listName : \"showmenu\", listAction :\"메뉴를 보여주는 기능\"}\r\n      ,{listName : \"hidemenu\", listAction :\"메뉴를 숨겨주는 기능\"}\r\n      ,{listName : \"showmenulist\", listAction :\"명령어 리스트를 숨겨주는 기능\"}\r\n      ,{listName : \"hidemenulist\", listAction :\"명령어 리스트를 숨겨주는 기능\"}]\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.cmdInput.focus();\r\n  }\r\n  _sendInputText=(e)=>{\r\n    if(e.keyCode === 13){\r\n      this.setState({\r\n        cmdValue : \"\"\r\n      })\r\n      this.props.cmdInput(this.state.cmdValue)\r\n    }\r\n  }\r\n  render() {\r\n    return (     \r\n      <MainContainer>\r\n        <CmdContainer>\r\n            <CmtTitle onClick={()=>{ this.props.cmdInput(\"showmenulist\")}}>Command</CmtTitle>\r\n            <CmdInput \r\n              value = {this.state.cmdValue}\r\n              ref={ref=>{this.cmdInput = ref}}\r\n              placeholder =\"input your cmd ...\"\r\n              onChange ={(e)=>{this.setState({cmdValue : e.target.value})}}\r\n              onKeyDown ={(e)=>{this._sendInputText(e)}}>\r\n            </CmdInput>    \r\n          {/* <h5>\r\n            {\"cmdList : \"}\r\n            {this.state.commandList.map((item)=>{\r\n              return item.cmdName+\"  \"\r\n            })}\r\n          </h5> */}\r\n        </CmdContainer>\r\n        <CmdListContainer isCmdListContainerVisible = {this.props.isCmdListContainerVisible}>\r\n          <CmdList >명령어 리스트</CmdList>\r\n          <CmdListImte>\r\n            {this.state.cmdList.map((item,index)=>{\r\n              \r\n            return <div><ListName onClick={()=>{ this.props.cmdInput(item.listName)}}>{item.listName}</ListName> : {item.listAction} </div>\r\n            \r\n            })}\r\n          </CmdListImte>\r\n        </CmdListContainer>\r\n     </MainContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainList;\r\n","import React, { Component } from 'react';\r\nimport styled,{createGlobalStyle} from \"styled-components\";\r\n\r\nconst RightContainer = styled.div`\r\n  width:20%;\r\n  float: right;\r\n  border : 1px solid #000;\r\n  display : none;\r\n  @media ( max-width: 480px ) {\r\n    float: none;\r\n    width: auto;\r\n  }\r\n`\r\nclass RightList extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.state={\r\n      ...props,\r\n    }\r\n  }\r\n  render() {\r\n    return (     \r\n      <RightContainer>\r\n        <ul calssName = \"rightContainer\">\r\n          <li>날씨</li>\r\n          </ul>\r\n      </RightContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RightList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport styled,{createGlobalStyle} from \"styled-components\";\nimport LeftList from './menu/leftList'\nimport MainList from './menu/mainList'\nimport RightList from './menu/rightList'\n\nconst GlobalStyle = createGlobalStyle`  \n  html {\n    height: 100vh; \n  }\n  body {\n    width :100%;    \n    height: 100vh;  \n    margin : 0 auto;\n    padding : 0px;\n    background-color :#000;\n    color : white\n  }\n`\nconst Container = styled.div`\n  display : flex;\n  flex-direction: column;\n  margin: 0 auto;\n`\nconst Header = styled.header`\n`\nconst TopMenu = styled.header`\n  display : ${props=>props.display};\n  justify-content: center;\n  align-items: center; \n\n`\nconst TopMenuList = styled.header` \n  padding : 0 30px 10px 30px;\n  text-align : center;\n`\nconst TitleName = styled.p`\n  font-weight : ${props=>(props.title === \"top\" ? 1000:700)};\n  font-size : ${props=>(props.title === \"top\" ? \"30px\":\"20px\")};\n  text-align : center;\n`\nclass App extends Component {\n  constructor(props){\n    super()\n    this.state={\n      ...props,\n      commandList : [{cmdName : \"CMD\"},{cmdName : \"LIST\"}],\n      cmdValue:\"\",\n      isTopMenuVisible:\"none\",\n      isCmdListContainerVisible :\"flex\"\n    }\n  }\n  _cmdInput = (inputText) =>{\n    inputText = inputText.toLocaleLowerCase();\n    switch (inputText){\n      case \"showmenu\" :\n        this.setState({\n          isTopMenuVisible:\"flex\"\n        })\n      break;\n      case \"hidemenu\" :\n        this.setState({\n          isTopMenuVisible:\"none\"\n        })\n      break;\n      case \"showmenulist\" :\n      this.setState({\n        isCmdListContainerVisible:\"flex\"\n      })\n      break;\n      case \"hidemenulist\" :\n        this.setState({\n          isCmdListContainerVisible:\"none\"\n        })\n      break;\n      default:\n        alert(\"명령어 없음\")\n    }\n    \n  }\n  render() {\n    return (\n      <Container>\n        <GlobalStyle />\n        <Header>\n          <TitleName title=\"top\">HOME PAGE</TitleName>\n          <TitleName title=\"sub\">Kim Jong Woo</TitleName>\n        </Header> \n        <TopMenu display ={this.state.isTopMenuVisible}>\n          <TopMenuList>MENU 1</TopMenuList>  \n          <TopMenuList>MENU 2</TopMenuList>  \n        </TopMenu>  \n        <MainList \n        cmdInput = {this._cmdInput}\n        isCmdListContainerVisible = {this.state.isCmdListContainerVisible}\n        ></MainList>\n        \n      </Container>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}